server.port = 8080


spring.thymeleaf.mode=LEGACYHTML5
spring.thymeleaf.cache=false

logging.level.org.springframework.security= INFO
logging.level.org.springframework.jdbc = INFO


spring.datasource.driverClassName = com.mysql.jdbc.Driver

# Connection url for the database
spring.datasource.url = jdbc:mysql://localhost:3306/wayut?useSSL=false&useUnicode=yes&characterEncoding=UTF-8

# Username and password
spring.datasource.username = root
spring.datasource.password = chen0469

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle = true
spring.datasource.validationQuery = SELECT 1


# ===============================
# = JPA / HIBERNATE
# ===============================

# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).

spring.jpa.database = MYSQL

# Show or not log for each sql query
spring.jpa.show-sql = false

# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto = update

# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.ImprovedNamingStrategy

# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect

oauth2.google.clientId = 295560764034-7qguh0prhgrpsggq5f3raqi4t50i4jt4.apps.googleusercontent.com
oauth2.google.clientSecret = oi4exxMrMtPUlXwgSgSj8j-2
oauth2.google.accessTokenUri = https://www.googleapis.com/oauth2/v4/token
oauth2.google.userAuthorizationUri = https://accounts.google.com/o/oauth2/v2/auth
oauth2.google.preEstablishedRedirectUri = http://localhost:8080/google-login
oauth2.google.scope = openid,email,profile
oauth2.google.useCurrentUri = false

